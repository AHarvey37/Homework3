[
  {
    "objectID": "Homework 3.html",
    "href": "Homework 3.html",
    "title": "Homework 3",
    "section": "",
    "text": "Task 1: Conceptual Questions\n\nIf your working directory is myfolder/homework/, what relative path would you specify to get the file located at myfolder/MyData.csv?\n\n\nUse read.csv(“myfolder/MyData.csv”)\n\n\nWhat are the major benefits of using R projects?\n\n\nR Projects help facilitate the use of version control as well as housing all associated files in one place\n\n\nWhat is git and what is github?\n\n\nGit is a local software that enables version control with files on your computer. Github is a internet hosted website that also allows for version control but on the website instead of on you local machine. Github facilitates collaboration for multiple users. It interacts with Git to allow this collaboration without constant direct manipulation on the Github website.\n\n\nWhat are the two main differences between a tibble and a data.frame?\n\n\nA data.frame is a 2D, heterogeneous, base R object composed of rows and columns, where elements of columns must be of the same type but elements of rows may differ. A tibble is a lazy data frame specific to the tidyverse that returns errors more often forcing the user to clean the data earlier.\n\n\nRewrite the following nested function call using baseR’s chaining operator:\n\n\narrange(filter(select(as_tibble(iris), starts_with(\"Petal\"), Species), Petal.Length &lt; 1.55), Species)\n\n\nchained function is:\n\n\nas_tibble(iris) |&gt;\n  select(starts_with(\"Petal\"), Species) |&gt;\n  filter(Petal.Length &lt; 1.55)|&gt;\n  arrange(Species)\n\n\nWhat is meant by long format data and wide format data? Which do we generally prefer for statistical analysis?\n\n\nLong format data is where every row consists of a single observation and every column consists of a single variable. Wide format data is where more than one observation in a row. For statistical analysis we prefer long formatted data.\n\n#Task 2: Reading Delimited Data\nNote: Use chaining where possible! The data sets we’ll use for this part comes from the UCI machine learning repository.\n\nGlass data\nThe first data set is called glass.data. You’ll need to open the raw data set to determine the type of delimiter. the data is available at:https://www4.stat.ncsu.edu/~online/dataset/glass/data.\n\nThe description of the data (not super useful!):\n\n     Vina conducted a comparison test of her rule-based system, BEAGLE, the nearest-neighbor\n      algorithm, and discriminant analysis. BEAGLE isa product available through VRS Consulting,\n      Inc.; 4676 Admiralty Way, Suite 206; Marina Del Ray, CA 90292 (213) 827-7890 and FAX: -\n      3189. In determining whether the glass was a type of ‘float’ glass or not, the following results\n      were obtained (# incorrect answers): Type of Sample Beagle NN DA Windows that were float\n      processed (87) 10 12 21 Windows that were not: (76) 19 16 22 The study of classification of types\n      of glass was motivated by criminologist investigation. At the scene of the crime, the glass left\n      can be used as evidence. . . if it is correctly identified!\n\nThe variables and their descriptions:\n\n\n\n\n\n\nVariables\nDescription\n\n\n\n\nId\nNumber 1-214\n\n\nRI\nRefractive index\n\n\nNa\nSodium (unit measurement: weight percent in corresponding oxide, as are attributes 4-10)\n\n\nMg\nMagnesium\n\n\nAl\nAluminum\n\n\nSi\nSilicon\n\n\nK\nPotassium\n\n\nCa\nCalcium\n\n\nBa\nBarium\n\n\nFe\nIron\n\n\n\n\n\nWith the last variable being Type of Glass with values of – 1 building_windows_float_processed, – 2 building_windows_non_float_processed, – 3 vehicle_windows_float_processed, – 4 vehicle_windows_non_float_processed (none in this database), – 5 containers, – 6 tableware, – 7 headlamps.\n\nRead this data into R directly from the URL using functions from the tidyverse. Notice that the data doesn’t include column names - add those (in a manner of your choosing). Print out the tibble (just call the object name).\n\n\nlibrary(tidyverse)\nbeagle &lt;- as_tibble(read.csv(\"https://www4.stat.ncsu.edu/~online/datasets/glass.data\",\n                             header = FALSE))|&gt;\n  rename(\"Id\"=1,\"RI\"=2,\"Na\"=3,\"Mg\"=4,\"Al\"=5,\"Si\"=6,\"K\"=7,\"Ca\"=8,\"Ba\"=9,\"Fe\"=10, \"Type_of_Glass\"= 11)\nbeagle\n\n# A tibble: 214 × 11\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_Glass\n   &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;         &lt;int&gt;\n 1     1  1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0                1\n 2     2  1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0                1\n 3     3  1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0                1\n 4     4  1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0                1\n 5     5  1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0                1\n 6     6  1.52  12.8  3.61  1.62  73.0  0.64  8.07     0  0.26             1\n 7     7  1.52  13.3  3.6   1.14  73.1  0.58  8.17     0  0                1\n 8     8  1.52  13.2  3.61  1.05  73.2  0.57  8.24     0  0                1\n 9     9  1.52  14.0  3.58  1.37  72.1  0.56  8.3      0  0                1\n10    10  1.52  13    3.6   1.36  73.0  0.57  8.4      0  0.11             1\n# ℹ 204 more rows\n\n\n\nStart a chain that would overwrite the Type_of_glass variable using mutate(). Create a character string version (that is, replace 1 with “building_windows_float_processed”, 2 with “building_win. . .”, etc.) instead (see the variable descriptions above to give meaningful values). (If you are familiar with factors, feel free to use that instead of a character string variable - otherwise, think if/then/else via ifelse().)\nContinue your chain and keep only observations where the Fe variable is less than 0.2 and the Type of Glass is either “tableware” or “headlamp”.\n\n\nbeagle&lt;- beagle|&gt;\n  mutate(Type_of_Glass = if_else(beagle$Type_of_Glass==1,\n                                 \"building_windows_float_processed\",\n                                 if_else(beagle$Type_of_Glass==2,\n                                         \"building_windows_non_float_processed\",\n                                         if_else(beagle$Type_of_Glass==3,\n                                               \"vehicle_windows_float_processed\",\n                                               if_else(beagle$Type_of_Glass==4,\n                                                       \"vehicle_windows_non_float_processed\",\n                                                       if_else(beagle$Type_of_Glass==5,\n                                                               \"containers\",\n                                                               if_else(beagle$Type_of_Glass==6,\n                                                                       \"tableware\",\n                                                                       if_else(beagle$Type_of_Glass==7,\n                                                                               \"headlamps\",\n                                                                               \"ERROR\"))))))))|&gt;\n  filter(Fe&lt;0.2 & Type_of_Glass == c(\"tableware\",\"headlamps\"))|&gt;\n  print()\n\n# A tibble: 20 × 11\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_Glass\n   &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;        \n 1   177  1.52  14    2.39  1.56  72.4  0     9.57  0     0    tableware    \n 2   179  1.52  14.5  2.24  1.62  72.4  0     9.26  0     0    tableware    \n 3   181  1.51  14.4  1.74  1.54  74.6  0     7.59  0     0    tableware    \n 4   183  1.52  14.2  0     2.09  72.7  0    10.9   0     0    tableware    \n 5   185  1.51  17.4  0     0.34  75.4  0     6.65  0     0    tableware    \n 6   186  1.51  13.7  3.2   1.81  72.8  1.76  5.43  1.19  0    headlamps    \n 7   188  1.52  13.4  3.34  1.23  72.4  0.6   8.83  0     0    headlamps    \n 8   190  1.52  15.8  1.83  1.31  70.4  0.31  8.61  1.68  0    headlamps    \n 9   192  1.52  14.8  0     2.38  73.3  0     8.76  0.64  0.09 headlamps    \n10   194  1.52  14.8  0     2     73.0  0     8.53  1.59  0.08 headlamps    \n11   196  1.52  14.1  0     2.68  73.4  0.08  9.07  0.61  0.05 headlamps    \n12   198  1.52  14.7  0     2.34  73.3  0     8.95  0.66  0    headlamps    \n13   200  1.52  15.0  0     2.51  73.0  0.05  8.83  0.53  0    headlamps    \n14   202  1.52  12.0  0     1.19  75.2  2.7   8.93  0     0    headlamps    \n15   204  1.52  14.8  0     1.99  73.1  0     8.28  1.71  0    headlamps    \n16   206  1.52  15.0  0     1.8   73.0  0     8.61  1.55  0    headlamps    \n17   208  1.52  14.4  0     1.82  72.9  1.41  6.47  2.88  0    headlamps    \n18   210  1.52  14.1  0     2.88  72.6  0.08  9.18  1.06  0    headlamps    \n19   212  1.52  14.4  0     2.02  73.4  0     8.44  1.64  0    headlamps    \n20   214  1.52  14.2  0     2.08  73.4  0     8.62  1.67  0    headlamps    \n\n\n\n\nYeast Data\nThe second data set is called yeast.data. You’ll need to open the raw data set to determine the type of delimiter. The data is available at: https://www4.stat.ncsu.edu/~online/datasets/yeast.data.\n\nThe description of the data (not super useful!):\n\n      The references below describe a predecessor to this dataset and its development. They also give results (not cross-validated) for classification by a rule-based expert system with that version of the dataset. Reference: ‘Expert Sytem for Predicting Protein Localization Sites in Gram-Negative Bacteria’, Kenta Nakai & Minoru Kanehisa, PROTEINS: Structure, Function, and Genetics 11:95-110, 1991.\n\nThe variables and their descriptions:\n\n\n\n\n\n\n\n\n\n\nVariables\nDescription\n\n\n\n\nseq_name\nAccession number for the SWISS-PROT database\n\n\nmcg\nMcGeoch’s method for signal sequence recognition.\n\n\ngvh\nvon Heijne’s method for signal sequence recognition.\n\n\nalm\nScore of the ALOM membrane spanning region prediction program.\n\n\nmit\nScore of discriminant analysis of the amino acid content of the N-terminal region (20 residues long) of mitochondrial andnon-mitochondrial proteins.\n\n\nerl\nPresence of ‘HDEL’ substring (thought to act as a signal for retention in the endoplasmic reticulum lumen). Binary attribute.\n\n\npox\nPeroxisomal targeting signal in the C-terminus.\n\n\nvac\nScore of discriminant analysis of the amino acid content of vacuolar and extracellular proteins.\n\n\nnuc\nScore of discriminant analysis of nuclear localization signals of nuclear and non-nuclear proteins.\n\n\nclass\nLocalization site\n\n\n\n\n\n\nRead this data into R directly from the URL using functions from the tidyverse. Notice that the data doesn’t include column names - add those (in a manner of your choosing). Print out the tibble (just call the object name).\n\n\nyeast &lt;- as.tibble(read_table(\"https://www4.stat.ncsu.edu/~online/datasets/yeast.data\",\n                              col_names = FALSE))|&gt;\n  rename(\"seq_name\" = 1,\n         \"mcg\" = 2,\n         \"gvh\" = 3,\n         \"alm\" = 4,\n         \"mit\" = 5,\n         \"erl\" = 6,\n         \"pox\" = 7,\n         \"vac\" = 8,\n         \"nuc\" = 9,\n         \"class\"= 10)\nyeast\n\n# A tibble: 1,484 × 10\n   seq_name     mcg   gvh   alm   mit   erl   pox   vac   nuc class\n   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n 1 ADT1_YEAST  0.58  0.61  0.47  0.13   0.5   0    0.48  0.22 MIT  \n 2 ADT2_YEAST  0.43  0.67  0.48  0.27   0.5   0    0.53  0.22 MIT  \n 3 ADT3_YEAST  0.64  0.62  0.49  0.15   0.5   0    0.53  0.22 MIT  \n 4 AAR2_YEAST  0.58  0.44  0.57  0.13   0.5   0    0.54  0.22 NUC  \n 5 AATM_YEAST  0.42  0.44  0.48  0.54   0.5   0    0.48  0.22 MIT  \n 6 AATC_YEAST  0.51  0.4   0.56  0.17   0.5   0.5  0.49  0.22 CYT  \n 7 ABC1_YEAST  0.5   0.54  0.48  0.65   0.5   0    0.53  0.22 MIT  \n 8 BAF1_YEAST  0.48  0.45  0.59  0.2    0.5   0    0.58  0.34 NUC  \n 9 ABF2_YEAST  0.55  0.5   0.66  0.36   0.5   0    0.49  0.22 MIT  \n10 ABP1_YEAST  0.4   0.39  0.6   0.15   0.5   0    0.58  0.3  CYT  \n# ℹ 1,474 more rows\n\n\n\nStart a chain that removes the seq_name and nuc columns.\nContinue your chain to add columns corresponding to the mean and median of each numeric variable (mcg, gvh, alm, mit, erl, pox, and vac) at each class grouping (see the across() function as we did in the dplyr video!).\n\n\nyeast &lt;- yeast |&gt;\n  select(-c(seq_name, nuc))|&gt;\n  mutate(across(1:7,list(mean = mean, median = median), .names = \"{.fn}_{.col}\"))|&gt;\n  print()\n\n# A tibble: 1,484 × 22\n     mcg   gvh   alm   mit   erl   pox   vac class mean_mcg median_mcg mean_gvh\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.58  0.61  0.47  0.13   0.5   0    0.48 MIT      0.500       0.49    0.500\n 2  0.43  0.67  0.48  0.27   0.5   0    0.53 MIT      0.500       0.49    0.500\n 3  0.64  0.62  0.49  0.15   0.5   0    0.53 MIT      0.500       0.49    0.500\n 4  0.58  0.44  0.57  0.13   0.5   0    0.54 NUC      0.500       0.49    0.500\n 5  0.42  0.44  0.48  0.54   0.5   0    0.48 MIT      0.500       0.49    0.500\n 6  0.51  0.4   0.56  0.17   0.5   0.5  0.49 CYT      0.500       0.49    0.500\n 7  0.5   0.54  0.48  0.65   0.5   0    0.53 MIT      0.500       0.49    0.500\n 8  0.48  0.45  0.59  0.2    0.5   0    0.58 NUC      0.500       0.49    0.500\n 9  0.55  0.5   0.66  0.36   0.5   0    0.49 MIT      0.500       0.49    0.500\n10  0.4   0.39  0.6   0.15   0.5   0    0.58 CYT      0.500       0.49    0.500\n# ℹ 1,474 more rows\n# ℹ 11 more variables: median_gvh &lt;dbl&gt;, mean_alm &lt;dbl&gt;, median_alm &lt;dbl&gt;,\n#   mean_mit &lt;dbl&gt;, median_mit &lt;dbl&gt;, mean_erl &lt;dbl&gt;, median_erl &lt;dbl&gt;,\n#   mean_pox &lt;dbl&gt;, median_pox &lt;dbl&gt;, mean_vac &lt;dbl&gt;, median_vac &lt;dbl&gt;\n\n\n#Task 3: Combining Excel and Delimited Data\nThe data set we’ll use for this part comes from the UCI machine learning repository. There are two data sets that are ‘related to red and white variants of the Portuguese “Vinho Verde” wine.’ There are physicochemical variables and a quality score, as rated by experts. Input variables (based on physicochemical tests):\n\nfixed acidity\nvolatile acidity\ncitric acid\nresidual sugar\nchlorides\nfree sulfur dioxide\ntotal sulfur dioxide\ndensity\npH\nsulphates\nalcohol\n\nOutput variable (based on sensory data):\n\nquality (score between 0 and 10)\n\n\nThere is an excel version of the white wine data set available at https://www4.stat.ncsu.edu/~online/datasets/white-wine.xlsx.\n\n      - Download this file\n      - Place it in a folder you know (such as your working directory for your project)\n      - Import the data from the first sheet using the readxl package\n      - Print out the tibble (just call the object name)\n\nlibrary(readxl)\nwhite_wine &lt;- as.tibble(read_excel(\"data/white-wine.xlsx\",\n           sheet = excel_sheets(\"data/white-wine.xlsx\")[1]))\nwhite_wine\n\n# A tibble: 4,898 × 12\n   `fixed acidity` `volatile acidity` `citric acid` `residual sugar` chlorides\n             &lt;dbl&gt;              &lt;dbl&gt;         &lt;dbl&gt;            &lt;dbl&gt;     &lt;dbl&gt;\n 1               7               0.27          0.36             20.7     0.045\n 2              63               0.3           0.34              1.6     0.049\n 3              81               0.28          0.4               6.9     0.05 \n 4              72               0.23          0.32              8.5     0.058\n 5              72               0.23          0.32              8.5     0.058\n 6              81               0.28          0.4               6.9     0.05 \n 7              62               0.32          0.16              7       0.045\n 8               7               0.27          0.36             20.7     0.045\n 9              63               0.3           0.34              1.6     0.049\n10              81               0.22          0.43              1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: `free sulfur dioxide` &lt;dbl&gt;,\n#   `total sulfur dioxide` &lt;dbl&gt;, density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;,\n#   alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\n\nWhen you print the data set out to the console, you may notice that some of the variable names are surrounded by backticks. This is because they are non-standard (they include a space in them). We can rename them in a number of ways. We’ll do it by reading in the variable names from the 2nd sheet of the same file.\n\n      - Read in the data from the 2nd sheet. This should return a data frame with one column containing alternative versions of the variable names.\n      - Grab that column and overwrite the current column names (colnames()) of your white wine tibble.\n\nwhite_wine_names &lt;- read_excel(\"data/white-wine.xlsx\",\n                               sheet = excel_sheets(\"data/white-wine.xlsx\")[2])\n\ncolnames(white_wine) &lt;- pull(white_wine_names,1)\n\nwhite_wine\n\n# A tibble: 4,898 × 12\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\n\nLastly, add a column to this data set to indicate the wines are white. That is, add a column that has values of ‘white’ for every observation.\n\n\nwhite_wine&lt;- white_wine|&gt; mutate(\"Type\" = \"white\")\n\n\nThere is a semi-colon delimited version of the red wine data set available at https://www4.stat.ncsu.edu/~online/datasets/red-wine.csv.\n\n\nRead this in using the readr package. Be careful that the columns are read in as the correct type!\nYou should replace the variable names as done above\nYou should append a column denoting the type as “red”\n\n\nred_wine&lt;- read_delim(\"https://www4.stat.ncsu.edu/~online/datasets/red-wine.csv\",\n                      delim = \";\")\ncolnames(red_wine)&lt;- pull(white_wine_names,1)\nred_wine&lt;- red_wine|&gt;\n  mutate(\"Type\" = \"red\")\nred_wine\n\n# A tibble: 1,599 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1           7.4             0.7         0               1.9     0.076\n 2           7.8             0.88        0               2.6     0.098\n 3           7.8             0.76        0.04            2.3     0.092\n 4          11.2             0.28        0.56            1.9     0.075\n 5           7.4             0.7         0               1.9     0.076\n 6           7.4             0.66        0               1.8     0.075\n 7           7.9             0.6         0.06            1.6     0.069\n 8           7.3             0.65        0               1.2     0.065\n 9           7.8             0.58        0.02            2       0.073\n10           7.5             0.5         0.36            6.1     0.071\n# ℹ 1,589 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   Type &lt;chr&gt;\n\n\n\nCombine these two data sets into one data set. They both have the exact same columns so this is an easy append task!\n\n      - Use the dplyr::bind_rows() function (see the help) to create one tibble containing all of the wine data.\n\nwine_data &lt;- bind_rows(white_wine,red_wine)\nwine_data\n\n# A tibble: 6,497 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 6,487 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   Type &lt;chr&gt;\n\n\n\nStart a chain on your new combined data object to filter the data to only look at high-quality wines (quality &gt; 6.5) and wines that have a reasonable alcohol value (alcohol &lt; 132).\nContinue your chain to now sort the data from highest quality to lowest.\nContinue your chain to select only the variables that contain acid, the alcohol variable, the type variable, and the quality variable.\nContinue your chain to add the mean and standard deviation of the alcohol variable to the data set for each setting of the quality variable.\n\n\nwine_data &lt;- wine_data |&gt;\n  filter(quality &gt; 6.5 & alcohol &lt; 132)|&gt;\n  arrange(desc(quality))|&gt;\n  select(contains(\"acid\"),\n         alcohol,\n         Type,quality)|&gt;\n  group_by(quality)|&gt;\n  mutate(across(alcohol,\n                list(mean,sd),\n                .names = \"{.fn}_{.col}\"))\n\n#Task 4: Database Practice\nDownload the Lahman.db file associated with the Connecting to Databases notes/video.\n\nConnect to the database and then look at all of the tables in the database.\n\n\nlibrary(DBI)\ncon &lt;- dbConnect(RSQLite::SQLite(), \"data/lahman.db\")\ndbListTables(con)\n\n [1] \"AllstarFull\"         \"Appearances\"         \"AwardsManagers\"     \n [4] \"AwardsPlayers\"       \"AwardsShareManagers\" \"AwardsSharePlayers\" \n [7] \"Batting\"             \"BattingPost\"         \"CollegePlaying\"     \n[10] \"Fielding\"            \"FieldingOF\"          \"FieldingOFsplit\"    \n[13] \"FieldingPost\"        \"HallOfFame\"          \"HomeGames\"          \n[16] \"LahmanData\"          \"Managers\"            \"ManagersHalf\"       \n[19] \"Parks\"               \"People\"              \"Pitching\"           \n[22] \"PitchingPost\"        \"Salaries\"            \"Schools\"            \n[25] \"SeriesPost\"          \"Teams\"               \"TeamsFranchises\"    \n[28] \"TeamsHalf\"           \"battingLabels\"       \"fieldingLabels\"     \n[31] \"pitchingLabels\"     \n\n\n\nUse the tbl() function and dplyr to return all of the data from the Teams table for the year 2015.\n\n\nteams &lt;- tbl(con, \"Teams\") |&gt;\n  filter(yearID == 2015)\nteams\n\n# Source:   SQL [?? x 48]\n# Database: sqlite 3.46.0 [C:\\Users\\Drewa\\OneDrive\\Desktop\\Grad School\\3. Summer 24\\Homework3\\data\\lahman.db]\n   yearID lgID  teamID franchID divID  Rank     G Ghome     W     L DivWin WCWin\n    &lt;int&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;    &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;  &lt;chr&gt;\n 1   2015 NL    ARI    ARI      W         3   162    81    79    83 N      N    \n 2   2015 NL    ATL    ATL      E         4   162    81    67    95 N      N    \n 3   2015 AL    BAL    BAL      E         3   162    78    81    81 N      N    \n 4   2015 AL    BOS    BOS      E         5   162    81    78    84 N      N    \n 5   2015 AL    CHA    CHW      C         4   162    81    76    86 N      N    \n 6   2015 NL    CHN    CHC      C         3   162    81    97    65 N      Y    \n 7   2015 NL    CIN    CIN      C         5   162    81    64    98 N      N    \n 8   2015 AL    CLE    CLE      C         3   161    80    81    80 N      N    \n 9   2015 NL    COL    COL      W         5   162    81    68    94 N      N    \n10   2015 AL    DET    DET      C         5   161    81    74    87 N      N    \n# ℹ more rows\n# ℹ 36 more variables: LgWin &lt;chr&gt;, WSWin &lt;chr&gt;, R &lt;int&gt;, AB &lt;int&gt;, H &lt;int&gt;,\n#   X2B &lt;int&gt;, X3B &lt;int&gt;, HR &lt;int&gt;, BB &lt;int&gt;, SO &lt;int&gt;, SB &lt;int&gt;, CS &lt;int&gt;,\n#   HBP &lt;int&gt;, SF &lt;int&gt;, RA &lt;int&gt;, ER &lt;int&gt;, ERA &lt;dbl&gt;, CG &lt;int&gt;, SHO &lt;int&gt;,\n#   SV &lt;int&gt;, IPouts &lt;int&gt;, HA &lt;int&gt;, HRA &lt;int&gt;, BBA &lt;int&gt;, SOA &lt;int&gt;, E &lt;int&gt;,\n#   DP &lt;int&gt;, FP &lt;dbl&gt;, name &lt;chr&gt;, park &lt;chr&gt;, attendance &lt;int&gt;, BPF &lt;int&gt;,\n#   PPF &lt;int&gt;, teamIDBR &lt;chr&gt;, teamIDlahman45 &lt;chr&gt;, teamIDretro &lt;chr&gt;\n\n\n\nRepeat the above by using the sql() function within tbl() (here you have to write actual SQL!).\n\n\nteams2 &lt;- tbl(con, sql(\n  \"SELECT * FROM Teams \n  WHERE yearID = 2015\"))\nteams2\n\n# Source:   SQL [?? x 48]\n# Database: sqlite 3.46.0 [C:\\Users\\Drewa\\OneDrive\\Desktop\\Grad School\\3. Summer 24\\Homework3\\data\\lahman.db]\n   yearID lgID  teamID franchID divID  Rank     G Ghome     W     L DivWin WCWin\n    &lt;int&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;    &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;  &lt;chr&gt;\n 1   2015 NL    ARI    ARI      W         3   162    81    79    83 N      N    \n 2   2015 NL    ATL    ATL      E         4   162    81    67    95 N      N    \n 3   2015 AL    BAL    BAL      E         3   162    78    81    81 N      N    \n 4   2015 AL    BOS    BOS      E         5   162    81    78    84 N      N    \n 5   2015 AL    CHA    CHW      C         4   162    81    76    86 N      N    \n 6   2015 NL    CHN    CHC      C         3   162    81    97    65 N      Y    \n 7   2015 NL    CIN    CIN      C         5   162    81    64    98 N      N    \n 8   2015 AL    CLE    CLE      C         3   161    80    81    80 N      N    \n 9   2015 NL    COL    COL      W         5   162    81    68    94 N      N    \n10   2015 AL    DET    DET      C         5   161    81    74    87 N      N    \n# ℹ more rows\n# ℹ 36 more variables: LgWin &lt;chr&gt;, WSWin &lt;chr&gt;, R &lt;int&gt;, AB &lt;int&gt;, H &lt;int&gt;,\n#   X2B &lt;int&gt;, X3B &lt;int&gt;, HR &lt;int&gt;, BB &lt;int&gt;, SO &lt;int&gt;, SB &lt;int&gt;, CS &lt;int&gt;,\n#   HBP &lt;int&gt;, SF &lt;int&gt;, RA &lt;int&gt;, ER &lt;int&gt;, ERA &lt;dbl&gt;, CG &lt;int&gt;, SHO &lt;int&gt;,\n#   SV &lt;int&gt;, IPouts &lt;int&gt;, HA &lt;int&gt;, HRA &lt;int&gt;, BBA &lt;int&gt;, SOA &lt;int&gt;, E &lt;int&gt;,\n#   DP &lt;int&gt;, FP &lt;dbl&gt;, name &lt;chr&gt;, park &lt;chr&gt;, attendance &lt;int&gt;, BPF &lt;int&gt;,\n#   PPF &lt;int&gt;, teamIDBR &lt;chr&gt;, teamIDlahman45 &lt;chr&gt;, teamIDretro &lt;chr&gt;\n\n\nEither use dplyr or write SQL queries for the rest of these questions!\n\nReturn all of the players in the hall of fame, the year they were voted into the hall of fame, and their category (only those three variables!). See the HallOfFame table, the inducted variable is important here.\n\n\nHall_of_Fame &lt;- as_tibble(tbl(con, \"HallofFame\"))|&gt;\n  filter(inducted == \"Y\")|&gt;\n  select(playerID, yearID, category)\n\nHall_of_Fame\n\n# A tibble: 340 × 3\n   playerID  yearID category         \n   &lt;chr&gt;      &lt;int&gt; &lt;chr&gt;            \n 1 cobbty01    1936 Player           \n 2 ruthba01    1936 Player           \n 3 wagneho01   1936 Player           \n 4 mathech01   1936 Player           \n 5 johnswa01   1936 Player           \n 6 lajoina01   1937 Player           \n 7 speaktr01   1937 Player           \n 8 youngcy01   1937 Player           \n 9 bulkemo99   1937 Pioneer/Executive\n10 johnsba99   1937 Pioneer/Executive\n# ℹ 330 more rows\n\n\n\nCombine the table from the previous question with the People table in order to have the nameFirst and nameLast names added to what was returned above.\n\n\npeople &lt;- as_tibble(tbl(con, \"People\"))|&gt;\n  select(nameFirst,nameLast,playerID)\nnew_HoF &lt;- right_join(people,Hall_of_Fame,by = \"playerID\")\nnew_HoF\n\n# A tibble: 340 × 5\n   nameFirst nameLast  playerID  yearID category\n   &lt;chr&gt;     &lt;chr&gt;     &lt;chr&gt;      &lt;int&gt; &lt;chr&gt;   \n 1 Hank      Aaron     aaronha01   1982 Player  \n 2 Pete      Alexander alexape01   1938 Player  \n 3 Roberto   Alomar    alomaro01   2011 Player  \n 4 Walter    Alston    alstowa01   1983 Manager \n 5 Sparky    Anderson  andersp01   2000 Manager \n 6 Cap       Anson     ansonca01   1939 Player  \n 7 Luis      Aparicio  aparilu01   1984 Player  \n 8 Luke      Appling   applilu01   1964 Player  \n 9 Richie    Ashburn   ashburi01   1995 Player  \n10 Earl      Averill   averiea01   1975 Player  \n# ℹ 330 more rows\n\n\n\nReturn only the playerID (manager ID in this case), G, W, and L columns from the Managers table. Use chaining to then:\n\n\nDetermine the overall win/loss records (sum of wins and sum of losses) for each of these hall of fame managers.\n\n– We haven’t quite covered this so I’ll help out. We want to use group_by() with summarize() rather than mutate(). Something like this:\ntbl(con, “Managers”) |&gt; select(…) |&gt; group_by(playerID) |&gt; summarize(G_managed = sum(G, na.rm = TRUE), Total_W = sum(W, na.rm = TRUE), Total_L = sum(L, na.rm = TRUE))\n\nCreate a new variable that is the career win/loss percentage (Total_W/G_managed). (Note: I did this after collect() otherwise the column type has to be set. . . )\nSort the resulting data by the win/loss percentage variable (from largest to smallest).\n\n\nmanager &lt;- as_tibble(tbl(con, \"Managers\"))|&gt;\n  select(playerID, G, W, L)|&gt;\n  group_by(playerID)|&gt;\n  summarize(G_managed = sum(G, na.rm = TRUE),\n            Total_W = sum(W, na.rm = TRUE),\n            Total_L = sum(L, na.rm = TRUE))|&gt;\n  collect()|&gt;\n  mutate(\"Win_Loss_Percentage\" = Total_W / G_managed)|&gt;\n  arrange(desc(Win_Loss_Percentage))\n\nmanager\n\n# A tibble: 749 × 5\n   playerID  G_managed Total_W Total_L Win_Loss_Percentage\n   &lt;chr&gt;         &lt;int&gt;   &lt;int&gt;   &lt;int&gt;               &lt;dbl&gt;\n 1 bensove01         1       1       0                   1\n 2 burwebi01         1       1       0                   1\n 3 cohenan01         1       1       0                   1\n 4 ebeldi99          3       3       0                   1\n 5 falkbi01          1       1       0                   1\n 6 hardeme01         3       3       0                   1\n 7 simmote01         1       1       0                   1\n 8 steinte01         2       2       0                   1\n 9 sukefcl01         2       2       0                   1\n10 tamarjo01         1       1       0                   1\n# ℹ 739 more rows\n\n\n\nUse the results from the previous two questions to answer this one! Return information for only the people that managed a team and were inducted into the hall of fame (regardless of their category in the hall of fame - you want to return all people in the hall of fame that ever managed at all). (Just return all of the variables from both of the above two questions - 9 total columns)\n\n\nHoF_managers &lt;- right_join(new_HoF, manager, by = \"playerID\")\nHoF_managers\n\n# A tibble: 749 × 9\n   nameFirst nameLast  playerID  yearID category       G_managed Total_W Total_L\n   &lt;chr&gt;     &lt;chr&gt;     &lt;chr&gt;      &lt;int&gt; &lt;chr&gt;              &lt;int&gt;   &lt;int&gt;   &lt;int&gt;\n 1 Walter    Alston    alstowa01   1983 Manager             3658    2040    1613\n 2 Sparky    Anderson  andersp01   2000 Manager             4030    2194    1834\n 3 Cap       Anson     ansonca01   1939 Player              2288    1296     947\n 4 Luke      Appling   applilu01   1964 Player                40      10      30\n 5 Harold    Baines    baineha01   2019 Player                 4       1       3\n 6 Dave      Bancroft  bancrda01   1971 Player               615     249     363\n 7 Ed        Barrow    barroed99   1953 Pioneer/Execu…       639     310     320\n 8 Yogi      Berra     berrayo01   1972 Player               930     484     444\n 9 Jim       Bottomley bottoji01   1974 Player                78      21      56\n10 Lou       Boudreau  boudrlo01   1970 Player              2404    1162    1224\n# ℹ 739 more rows\n# ℹ 1 more variable: Win_Loss_Percentage &lt;dbl&gt;"
  }
]